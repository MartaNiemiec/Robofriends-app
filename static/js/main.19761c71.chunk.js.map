{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","pros","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onSearchChange","event","target","value","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.19761c71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => { //props.name = name, props.email = email, props.id = id\r\n    return ( \r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 \">\r\n            <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />    {/* after \"?\" in the src we can set width and height */}\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n    // displaying an error\r\n    // if (true) {\r\n    //     throw new Error('NOOOOOOO!');\r\n    // }\r\n    return (\r\n            <div>\r\n                {\r\n                    robots.map((user, i) => {\r\n                        return (\r\n                            <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            />\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange } ) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"search\" \r\n            placeholder=\"search robots\"\r\n            onChange={searchChange}\r\n            />\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n  <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}> {/* adding a style we heve to put them into {} whis is tor JavaScript expression and  within this we're returning an object and this object can have CSS styles, such as a property \"overflowY\" (not like in CSS overflow-y, we have to camelCase for JSX). */}\r\n    {props.children}\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(pros) {\r\n    super(pros);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({hasError: true})\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {  // if this.state.hasError = true\r\n      return <h1>Oooops. That is not good</h1>\r\n    }\r\n    return this.props.children \r\n  }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';   // React.Component = {Component}\r\nimport CardList from '../components/CardList';  //parent of Card component\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'; \r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    // ====== STATE ======\r\n    // state is something that can change and affect the app; \r\n    // state lives in the parent component\r\n    constructor() {\r\n        super() // calls the constructor of Component\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '' \r\n        }\r\n    }\r\n    \r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')  //fetch is a part of the window object\r\n        .then(response => response.json())  //response return a promise\r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    \r\n    // With anything that comes from React, so constructor and render, are pre-built in React, any time we make our own methods on a component, we have to use arrow functions, and this makes sure that the \"this\" value is according to where it was created, which is the \"App\"\r\n    onSearchChange = (event) => {   \r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        return (!robots.length) ?   //if robots.length==0 so it's true, !the opposite is false\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));   //\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}